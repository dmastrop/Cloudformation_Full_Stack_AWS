Parameters:
  RoleTempName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: cicds3role
    # this is the name of the template and we are getting the export from the cicds3role.yaml which is
    # cicds3role-VPS3RoleProfileName variable. The data will be !Ref VPInstanceProfile of that template file.
    # this is used in NexusInst resource below

  JenkStackName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: jenk
    # This is the name of the tempalte jenk.yaml and we are getting the export from the template
    # The exported data is jenk-SGID forvpronexusSBIngress below to append the additonal rule to the nexusSG
    # that permits Jenkins to access Nexus server to upload the artfact from Nexus.

  # The root (master) template is sending 2 parameters to this child template: MyIP and KeyName
  MyIP:
    Type: String
  KeyName:
    Type: String

  # Fourth parameter is InstanceType
  InstanceType: 
    Type: String
    Default: t2.small


Mappings:
# ubuntu 18.  Use ubuntu 22
  AmiRegionMap:
  #Logical ID of the mappings
    us-east-1: 
      AMI: "ami-0e001c9271cf7f3b9"
    us-west-1: 
      AMI: "ami-036cafe742923b3d9"
    us-east-2: 
      AMI: "ami-0f30a9c3a48f3fa79"
    us-west-2: 
      AMI: "ami-03c983f9003cb9cd1"
    ap-northeast-1: 
      AMI: "ami-0595d6e81396a9efb"


Resources:
  App01qaInst:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
      # Fn::FindInMap:
        - AmiRegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - "app01-qa-vpro in "
              - !Ref AWS::Region
      SecurityGroups:
        - !Ref vproappSG
      
      IamInstanceProfile:
        # this is from cicds3role.yaml
        Fn::ImportValue:
          Fn::Sub: "${RoleTempName}-VPS3RoleProfileName"
          # RoleTempName is specified in the Parameters and is the VPInstanceProfile data from cicds3role.yaml
          # this is the exported variable VPS3RoleProfileName from cicds3role.yaml 
          # This value will be stored in IamInstanceProfile and attached to this instance.
          # This will give S3 full access so that the instance can download data from the S3 bucket (see below)

      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          !Sub |
              #!/bin/bash
              sudo apt update
              sudo apt install openjdk-8-jdk -y
              sudo apt install git wget unzip -y
              sudo apt install awscli -y
              TOMURL="https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz"
              cd /tmp/
              # add sudo
              sudo wget $TOMURL -O tomcatbin.tar.gz
              EXTOUT=`tar xzvf tomcatbin.tar.gz`
              TOMDIR=`echo $EXTOUT | cut -d '/' -f1`
              # add sudo
              sudo useradd --shell /sbin/nologin tomcat
              sudo rsync -avzh /tmp/$TOMDIR/ /usr/local/tomcat8/

              #aws s3 cp s3://cicd-data-vprofile-project25/tomcat-users.xml /usr/local/tomcat8/conf/tomcat-users.xml
              #aws s3 cp s3://cicd-data-vprofile-project25/context.xml /usr/local/tomcat8/webapps/manager/META-INF/context.xml
              
              sudo chown -R tomcat.tomcat /usr/local/tomcat8 
              cat <<EOT>> /etc/systemd/system/tomcat.service
              [Unit]
              Description=Tomcat
              After=network.target

              [Service]
              User=tomcat
              WorkingDirectory=/usr/local/tomcat8
              Environment=CATALINA_HOME=/usr/local/tomcat8
              Environment=CATALINE_BASE=/usr/local/tomcat8
              ExecStart=/usr/local/tomcat8/bin/catalina.sh run
              ExecStop=/usr/local/tomcat8/bin/shutdown.sh
              SyslogIdentifier=tomcat-%i

              [Install]
              WantedBy=multi-user.target
              EOT

              systemctl daemon-reload
              systemctl start tomcat
              systemctl enable tomcat


  vproappSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: vproappSG
      GroupDescription: Allow SSH & HTTP from MyIP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref MyIP

        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
          # software testing will be from anywhere

  # Jenkins needs 8080 traffic access to the tomcat server to upload the artifact to the tomcat server
  # Use a new Resource to inject the addtional ingress rule into the vproappSG above
  vproappSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: 
        Fn::GetAtt:
          - vproappSG
          - GroupId
          # !GetAtt vproappSG.GroupId
          # This gets the security group ID of the vproappSG above. We will be appending another ingress
          # rule to this SG
          # long hand vs. short hand syntax
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html
          # Fn::GetAtt: [ logicalNameOfResource, attributeName ]
          # !GetAtt logicalNameOfResource.attributeName
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      SourceSecurityGroupId:
       Fn::ImportValue:
       # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html
        Fn::Sub: "${JenkStackName}-SGID"
        # JenkStackName is defined above in Parameters
        # This will give us the jenk-SGID which is exported from the jenk.yaml template.
        # long hand vs. short hand syntax
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        # Fn::Sub:
        #   - String
        #   - Var1Name: Var1Value
        #     Var2Name: Var2Value
        # !Sub
        #    - String
        #    - Var1Name: Var1Value
        #      Var2Name: Var2Value


Outputs:
  appSecurityGroupId:
  # tomcat security group id will be used in the database template
    Description: Security Group1 ID
    Value:
      Fn::GetAtt:
        - vproappSG
        - GroupId
    Export:
      Name: app01qa-SGID
