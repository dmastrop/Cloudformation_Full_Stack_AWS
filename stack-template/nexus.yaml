Parameters:
  RoleTempName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: cicds3role
    # this is the name of the template and we are getting the export from the cicds3role.yaml which is
    # cicds3role-VPS3RoleProfileName variable. The data will be !Ref VPInstanceProfile of that template file.
    # this is used in NexusInst resource below

  JenkStackName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: jenk
    # This is the name of the tempalte jenk.yaml and we are getting the export from the template
    # The exported data is jenk-SGID forvpronexusSBIngress below to append the additonal rule to the nexusSG
    # that permits Jenkins to access Nexus server to upload the artfact from Nexus.

  # The root (master) template is sending 2 parameters to this child template: MyIP and KeyName
  MyIP:
    Type: String
  KeyName:
    Type: String

  # Fourth parameter is InstanceType
  InstanceType: 
    Type: String
    Default: t2.medium


# Mappings:
# # Need CentOS 7 or above. The AMIs below are CentOS stream 8
#   AmiRegionMap:
#   #Logical ID of the mappings
#     us-east-1: 
#       AMI: "ami-0cdb8266fcd5d3d63"
#     us-west-1: 
#       AMI: "ami-0789ea4ecdab43447"
#     us-east-2: 
#       AMI: "ami-013f9ee48907190f5"
#     us-west-2: 
#       AMI: "ami-031e6a417aae9b9f6"
#     ap-northeast-1: 
#       AMI: "ami-0270524b69d8dc369"
Mappings:
#Try centos stream 9
  AmiRegionMap:
  #Logical ID of the mappings
    us-east-1: 
      AMI: "ami-0df2a11dd1fe1f8e3"
    us-west-1: 
      AMI: "ami-084c852d3275c2e20"
    us-east-2: 
      AMI: "ami-011d59a275b482a49"
    us-west-2: 
      AMI: "ami-094cc0ced7b91fcf0"
    ap-northeast-1: 
      AMI: "ami-074c801439a538a43"



Resources:
# these are the resources for the EC2 instance
# First resouce is instance
  NexusInst:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      # see above Parameters
      KeyName: !Ref KeyName
      # see above Parameters
      ImageId: !FindInMap 
      # Fn::FindInMap:
        - AmiRegionMap
        #Logical ID of the Mapping
        - !Ref AWS::Region
        # dynamic region variable
        - AMI
        # subkey of the mapping
      Tags:
        - Key: "Name"
          #Value: "Nexus Server"
          Value: !Join
            - ""
            - - "Nexus in "
              - !Ref AWS::Region
      SecurityGroups:
        - !Ref nexusSG
        # see below for security group

      IamInstanceProfile:
        # this is from cicds3role.yaml
        Fn::ImportValue:
          Fn::Sub: "${RoleTempName}-VPS3RoleProfileName"
          # RoleTempName is specified in the Parameters and is the VPInstanceProfile data from cicds3role.yaml
          # this is the exported variable VPS3RoleProfileName from cicds3role.yaml cicds3role-VPS3RoleProfileName
          # This value will be stored in IamInstanceProfile and attached to this instance.
          # This will give S3 full access so that the instance can download data from the S3 bucket (see below)
      
      UserData:
      # set up nexus on this EC2 instance. Section 20 project 18 script.
       Fn::Base64:  # YAML makes userdata much cleaner.
      # UPDATED SCRIPT from project 18 Section 20
         !Sub |
              #!/bin/bash
              yum install java-1.8.0-openjdk.x86_64 wget -y   
              mkdir -p /opt/nexus/   
              mkdir -p /tmp/nexus/                           
              cd /tmp/nexus/
              NEXUSURL="https://download.sonatype.com/nexus/3/latest-unix.tar.gz"
              wget $NEXUSURL -O nexus.tar.gz
              sleep 10
              EXTOUT=`tar xzvf nexus.tar.gz`
              NEXUSDIR=`echo $EXTOUT | cut -d '/' -f1`
              sleep 5
              rm -rf /tmp/nexus/nexus.tar.gz
              cp -r /tmp/nexus/* /opt/nexus/
              sleep 5
              useradd nexus
              chown -R nexus.nexus /opt/nexus 
              sudo -i
              cat <<EOT>> /etc/systemd/system/nexus.service
              [Unit]                                                                          
              Description=nexus service                                                       
              After=network.target                                                            

              [Service]                                                                       
              Type=forking                                                                    
              LimitNOFILE=65536                                                               
              ExecStart=/opt/nexus/$NEXUSDIR/bin/nexus start                                  
              ExecStop=/opt/nexus/$NEXUSDIR/bin/nexus stop                                    
              User=nexus                                                                      
              Restart=on-abort                                                                

              [Install]                                                                       
              WantedBy=multi-user.target    
              EOT


              echo 'run_as_user="nexus"' > /opt/nexus/$NEXUSDIR/bin/nexus.rc
              systemctl daemon-reload
              systemctl start nexus
              systemctl enable nexus  
            # ORIGINAL SCRIPT:
            #  #!/bin/bash
            #  yum install java-1.8.0-openjdk.x86_64 wget -y   
            #  yum install epel-release -y
            #  yum install awscli -y
            #  mkdir -p /opt/nexus/   
            #  mkdir -p /tmp/nexus/                           
            #  cd /tmp/nexus
            #  NEXUSURL="https://download.sonatype.com/nexus/3/latest-unix.tar.gz"
            #  wget $NEXUSURL -O nexus.tar.gz
            #  EXTOUT=`tar xzvf nexus.tar.gz`
            #  NEXUSDIR=`echo $EXTOUT | cut -d '/' -f1`
            #  rm -rf /tmp/nexus/nexus.tar.gz
            #  rsync -avzh /tmp/nexus/ /opt/nexus/
            #  useradd nexus
            #  chown -R nexus.nexus /opt/nexus 
            #  cat <<EOT>> /etc/systemd/system/nexus.service
            #  [Unit]                                                                          
            #  Description=nexus service                                                       
            #  After=network.target                                                            
                                                                               
            #  [Service]                                                                       
            #  Type=forking                                                                    
            #  LimitNOFILE=65536                                                               
            #  ExecStart=/opt/nexus/$NEXUSDIR/bin/nexus start                                  
            #  ExecStop=/opt/nexus/$NEXUSDIR/bin/nexus stop                                    
            #  User=nexus                                                                      
            #  Restart=on-abort                                                                
                                                                               
            #  [Install]                                                                       
            #  WantedBy=multi-user.target                                                       
            #  EOT 
            #  echo 'run_as_user="nexus"' > /opt/nexus/$NEXUSDIR/bin/nexus.rc
            #  systemctl daemon-reload
            #  systemctl start nexus
            #  systemctl enable nexus

            #  aws s3 cp s3://cicd-data-vprofile-project25/nexus-cicd-vpro-pro.tgz  /opt/
            #  cd /opt/
            #  sleep 5
            #  systemctl stop nexus
            #  sleep 10
            #  tar xzvf nexus-cicd-vpro-pro.tgz 
            #  chown nexus.nexus /opt/nexus -R
            #  systemctl daemon-reload
            #  systemctl start nexus
            #  systemctl enable nexus
            #  reboot 

            
  # Second resource is the security group
  nexusSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: nexusSG
      GroupDescription: Allow SSH & HTTP from  MyIP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref MyIP

        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          CidrIp: !Ref MyIP

  # Jenkins needs to upload the artifact from nexus so Jenkins needs access to the Nexus server
  # Use a new Resource to inject the addtional ingress rule into the nexusSG above
  vpronexusSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: 
        Fn::GetAtt:
          - nexusSG
          - GroupId
          # !GetAtt nexusSG.GroupId
          # This gets the security group ID of the nexusSG above. We will be appending another ingress
          # rule to this SG
          # long hand vs. short hand syntax
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html
          # Fn::GetAtt: [ logicalNameOfResource, attributeName ]
          # !GetAtt logicalNameOfResource.attributeName
      IpProtocol: tcp
      FromPort: '8081'
      ToPort: '8081'
      SourceSecurityGroupId:
       Fn::ImportValue:
       # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html
        Fn::Sub: "${JenkStackName}-SGID"
        # JenkStackName is defined above in Parameters
        # This will give us the jenk-SGID which is exported from the jenk.yaml template.
        # long hand vs. short hand syntax
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        # Fn::Sub:
        #   - String
        #   - Var1Name: Var1Value
        #     Var2Name: Var2Value
        # !Sub
        #    - String
        #    - Var1Name: Var1Value
        #      Var2Name: Var2Value


